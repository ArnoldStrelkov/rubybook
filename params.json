{
  "name": "Rubybook",
  "tagline": "",
  "body": "### Изучаем ROR и JS на интересном проекте\r\nМы будем делать сервис по поиску единомышленников. Это такой сайт на котором каждый пользователь может разместить свою идею, предложение, проект, а другие пользователи сайта могут к данному проекту присоедениться.\r\n\r\n### Заводим модель `User`\r\nМодель юзера заводим с помошью такой миграции\r\n\r\n```ruby\r\nclass CreateUsers < ActiveRecord::Migration\r\n  def change\r\n    create_table :users do |t|\r\n      t.string :name\r\n      t.string :avatar\r\n      t.string :provider\r\n      t.string :uid\r\n      t.string :token\r\n    end\r\n  end\r\nend\r\n```\r\nВ поля `provider` и `uid` мы будем записывать информацию полученную от социальной сети при авторизации.\r\nНу и затем подрубаем авторизацию. Для этого прописываем в файле Gemfile два гема \r\n\r\n```ruby\r\ngem 'omniauth'\r\ngem 'omniauth-vkontakte'\r\n```\r\n\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}